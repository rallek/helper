<?php
/**
 * Helper.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace RK\HelperModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use RK\HelperModule\Traits\StandardFieldsTrait;
use RK\HelperModule\Validator\Constraints as HelperAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for info entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractInfoEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'info';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @HelperAssert\ListEntry(entityName="info", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $infoTitle
     */
    protected $infoTitle = '';
    
    /**
     * Title image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $titleImageMeta
     */
    protected $titleImageMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     *    minRatio = 2.95,
     *    maxRatio = 3.05,
     *    allowSquare = false,
     *    allowPortrait = false
     * )
     * @var string $titleImage
     */
    protected $titleImage = null;
    
    /**
     * Full title image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $titleImageUrl
     */
    protected $titleImageUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $copyright
     */
    protected $copyright = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=90000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="90000")
     * @var text $infoDescription
     */
    protected $infoDescription = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Regex(pattern="/\s/", match=false, message="This value must not contain space chars.")
     * @Assert\Length(min="0", max="255")
     * @Assert\Locale()
     * @var string $infoLocale
     */
    protected $infoLocale = '';
    
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    
    /**
     * InfoEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the info title.
     *
     * @return string
     */
    public function getInfoTitle()
    {
        return $this->infoTitle;
    }
    
    /**
     * Sets the info title.
     *
     * @param string $infoTitle
     *
     * @return void
     */
    public function setInfoTitle($infoTitle)
    {
        if ($this->infoTitle !== $infoTitle) {
            $this->infoTitle = isset($infoTitle) ? $infoTitle : '';
        }
    }
    
    /**
     * Returns the title image.
     *
     * @return string
     */
    public function getTitleImage()
    {
        return $this->titleImage;
    }
    
    /**
     * Sets the title image.
     *
     * @param string $titleImage
     *
     * @return void
     */
    public function setTitleImage($titleImage)
    {
        if ($this->titleImage !== $titleImage) {
            $this->titleImage = $titleImage;
        }
    }
    
    /**
     * Returns the title image url.
     *
     * @return string
     */
    public function getTitleImageUrl()
    {
        return $this->titleImageUrl;
    }
    
    /**
     * Sets the title image url.
     *
     * @param string $titleImageUrl
     *
     * @return void
     */
    public function setTitleImageUrl($titleImageUrl)
    {
        if ($this->titleImageUrl !== $titleImageUrl) {
            $this->titleImageUrl = $titleImageUrl;
        }
    }
    
    /**
     * Returns the title image meta.
     *
     * @return array
     */
    public function getTitleImageMeta()
    {
        return $this->titleImageMeta;
    }
    
    /**
     * Sets the title image meta.
     *
     * @param array $titleImageMeta
     *
     * @return void
     */
    public function setTitleImageMeta($titleImageMeta = [])
    {
        if ($this->titleImageMeta !== $titleImageMeta) {
            $this->titleImageMeta = $titleImageMeta;
        }
    }
    
    /**
     * Returns the copyright.
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->copyright;
    }
    
    /**
     * Sets the copyright.
     *
     * @param string $copyright
     *
     * @return void
     */
    public function setCopyright($copyright)
    {
        if ($this->copyright !== $copyright) {
            $this->copyright = isset($copyright) ? $copyright : '';
        }
    }
    
    /**
     * Returns the info description.
     *
     * @return text
     */
    public function getInfoDescription()
    {
        return $this->infoDescription;
    }
    
    /**
     * Sets the info description.
     *
     * @param text $infoDescription
     *
     * @return void
     */
    public function setInfoDescription($infoDescription)
    {
        if ($this->infoDescription !== $infoDescription) {
            $this->infoDescription = isset($infoDescription) ? $infoDescription : '';
        }
    }
    
    /**
     * Returns the info locale.
     *
     * @return string
     */
    public function getInfoLocale()
    {
        return $this->infoLocale;
    }
    
    /**
     * Sets the info locale.
     *
     * @param string $infoLocale
     *
     * @return void
     */
    public function setInfoLocale($infoLocale)
    {
        if ($this->infoLocale !== $infoLocale) {
            $this->infoLocale = isset($infoLocale) ? $infoLocale : '';
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'rkhelpermodule.ui_hooks.infos';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Info ' . $this->getKey() . ': ' . $this->getInfoTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setTitleImage(null);
        $this->setTitleImageMeta([]);
        $this->setTitleImageUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
