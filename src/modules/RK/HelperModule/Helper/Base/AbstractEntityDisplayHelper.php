<?php
/**
 * Helper.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace RK\HelperModule\Helper\Base;

use IntlDateFormatter;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Translator\TranslatorInterface;
use RK\HelperModule\Entity\LinkerEntity;
use RK\HelperModule\Entity\CarouselItemEntity;
use RK\HelperModule\Entity\CarouselEntity;
use RK\HelperModule\Entity\ImageEntity;
use RK\HelperModule\Entity\InfoEntity;
use RK\HelperModule\Helper\ListEntriesHelper;

/**
 * Entity display helper base class.
 */
abstract class AbstractEntityDisplayHelper
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;

    /**
     * @var ListEntriesHelper Helper service for managing list entries
     */
    protected $listEntriesHelper;

    /**
     * @var IntlDateFormatter Formatter for dates
     */
    protected $dateFormatter;

    /**
     * EntityDisplayHelper constructor.
     *
     * @param TranslatorInterface $translator        Translator service instance
     * @param RequestStack        $requestStack      RequestStack service instance
     * @param ListEntriesHelper   $listEntriesHelper Helper service for managing list entries
     */
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        ListEntriesHelper $listEntriesHelper
    ) {
        $this->translator = $translator;
        $this->listEntriesHelper = $listEntriesHelper;
        $locale = null !== $requestStack->getCurrentRequest() ? $requestStack->getCurrentRequest()->getLocale() : null;
        $this->dateFormatter = new IntlDateFormatter($locale, null, null);
    }

    /**
     * Returns the formatted title for a given entity.
     *
     * @param object $entity The given entity instance
     *
     * @return string The formatted title
     */
    public function getFormattedTitle($entity)
    {
        if ($entity instanceof LinkerEntity) {
            return $this->formatLinker($entity);
        }
        if ($entity instanceof CarouselItemEntity) {
            return $this->formatCarouselItem($entity);
        }
        if ($entity instanceof CarouselEntity) {
            return $this->formatCarousel($entity);
        }
        if ($entity instanceof ImageEntity) {
            return $this->formatImage($entity);
        }
        if ($entity instanceof InfoEntity) {
            return $this->formatInfo($entity);
        }
    
        return '';
    }
    
    /**
     * Returns the formatted title for a given entity.
     *
     * @param LinkerEntity $entity The given entity instance
     *
     * @return string The formatted title
     */
    protected function formatLinker(LinkerEntity $entity)
    {
        return $this->translator->__f('%linkerHeadline%', [
            '%linkerHeadline%' => $entity->getLinkerHeadline()
        ]);
    }
    
    /**
     * Returns the formatted title for a given entity.
     *
     * @param CarouselItemEntity $entity The given entity instance
     *
     * @return string The formatted title
     */
    protected function formatCarouselItem(CarouselItemEntity $entity)
    {
        return $this->translator->__f('%title%', [
            '%title%' => $entity->getTitle()
        ]);
    }
    
    /**
     * Returns the formatted title for a given entity.
     *
     * @param CarouselEntity $entity The given entity instance
     *
     * @return string The formatted title
     */
    protected function formatCarousel(CarouselEntity $entity)
    {
        return $this->translator->__f('%carouselName%', [
            '%carouselName%' => $entity->getCarouselName()
        ]);
    }
    
    /**
     * Returns the formatted title for a given entity.
     *
     * @param ImageEntity $entity The given entity instance
     *
     * @return string The formatted title
     */
    protected function formatImage(ImageEntity $entity)
    {
        return $this->translator->__f('%imageTitle%', [
            '%imageTitle%' => $entity->getImageTitle()
        ]);
    }
    
    /**
     * Returns the formatted title for a given entity.
     *
     * @param InfoEntity $entity The given entity instance
     *
     * @return string The formatted title
     */
    protected function formatInfo(InfoEntity $entity)
    {
        return $this->translator->__f('%infoTitle%', [
            '%infoTitle%' => $entity->getInfoTitle()
        ]);
    }
    
    /**
     * Returns name of the field used as title / name for entities of this repository.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return string Name of field to be used as title
     */
    public function getTitleFieldName($objectType)
    {
        if ($objectType == 'linker') {
            return 'linkerHeadline';
        }
        if ($objectType == 'carouselItem') {
            return 'itemName';
        }
        if ($objectType == 'carousel') {
            return 'carouselName';
        }
        if ($objectType == 'image') {
            return 'imageTitle';
        }
        if ($objectType == 'info') {
            return 'infoTitle';
        }
    
        return '';
    }
    
    /**
     * Returns name of the field used for describing entities of this repository.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return string Name of field to be used as description
     */
    public function getDescriptionFieldName($objectType)
    {
        if ($objectType == 'linker') {
            return 'linkerText';
        }
        if ($objectType == 'carouselItem') {
            return 'title';
        }
        if ($objectType == 'carousel') {
            return 'remarks';
        }
        if ($objectType == 'image') {
            return 'myDescription';
        }
        if ($objectType == 'info') {
            return 'infoDescription';
        }
    
        return '';
    }
    
    /**
     * Returns name of first upload field which is capable for handling images.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return string Name of field to be used for preview images
     */
    public function getPreviewFieldName($objectType)
    {
        if ($objectType == 'linker') {
            return 'linkerImage';
        }
        if ($objectType == 'carouselItem') {
            return 'itemImage';
        }
        if ($objectType == 'image') {
            return 'myImage';
        }
        if ($objectType == 'info') {
            return 'titleImage';
        }
    
        return '';
    }
    
    /**
     * Returns name of the date(time) field to be used for representing the start
     * of this object. Used for providing meta data to the tag module.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return string Name of field to be used as date
     */
    public function getStartDateFieldName($objectType)
    {
        if ($objectType == 'linker') {
            return 'createdDate';
        }
        if ($objectType == 'carouselItem') {
            return 'itemStartDate';
        }
        if ($objectType == 'carousel') {
            return 'createdDate';
        }
        if ($objectType == 'image') {
            return 'createdDate';
        }
        if ($objectType == 'info') {
            return 'createdDate';
        }
    
        return '';
    }
}
